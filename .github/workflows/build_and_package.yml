name: Build and Package

on:
  push:
    branches: [main, master]
    tags: ["v*"]
  pull_request:
    branches: [main, master]

jobs:
  package:
    name: Package for ${{ matrix.os }} with components separated
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, windows-2022]
        build_type: [Release]

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: "recursive"

      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake rpm dpkg zip
        timeout-minutes: 5

      - name: Install NSIS (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install nsis
        timeout-minutes: 5

      - name: Configure CMake
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=${{matrix.build_type}} --log-level=VERBOSE
        timeout-minutes: 10

      - name: Build
        run: |
          cmake --build build --config ${{matrix.build_type}} --parallel 2 --verbose
        timeout-minutes: 20

      - name: Package Components Separately
        run: |
          cd build
          cpack -G ZIP
        timeout-minutes: 10

      - name: List generated packages
        run: |
          ls -la build/
        shell: bash

      - name: Extract components from monolithic package (Linux)
        if: runner.os == 'Linux'
        run: |
          cd build
          mkdir temp_server temp_plugins
          unzip -q MCPPlugin-1.0.0-Linux-Runtime.zip -d temp_server
          unzip -q MCPPlugin-1.0.0-Linux-Runtime.zip -d temp_plugins

          rm -rf temp_server/bin/plugins
          rm -rf temp_server/bin/configs
          find temp_plugins -name "PluginServer" -delete
          find temp_plugins -name "plugin_ctl" -delete

          cd temp_server
          zip -r ../MCPPlugin-server-linux.zip .
          cd ../temp_plugins
          zip -r ../MCPPlugin-plugins-linux.zip .

          cd ..
          rm -rf temp_server temp_plugins
        shell: bash

      - name: Extract components from monolithic package (Windows)
        if: runner.os == 'Windows'
        run: |
          cd build
          mkdir temp_server
          mkdir temp_plugins

          Expand-Archive -Path "MCPPlugin-1.0.0-win64-Runtime.zip" -DestinationPath "temp_server" -Force
          Expand-Archive -Path "MCPPlugin-1.0.0-win64-Runtime.zip" -DestinationPath "temp_plugins" -Force

          if (Test-Path "temp_server\bin\plugins") {
            Remove-Item -Recurse -Force "temp_server\bin\plugins"
          }
          if (Test-Path "temp_server\bin\configs") {
            Remove-Item -Recurse -Force "temp_server\bin\configs"
          }

          Get-ChildItem -Path "temp_plugins" -Include "PluginServer.exe","plugin_ctl.exe" -Recurse | Remove-Item -Force

          Compress-Archive -Path "temp_server\*" -DestinationPath "MCPPlugin-server-windows.zip" -Force
          Compress-Archive -Path "temp_plugins\*" -DestinationPath "MCPPlugin-plugins-windows.zip" -Force

          Remove-Item -Recurse -Force temp_server
          Remove-Item -Recurse -Force temp_plugins
        shell: powershell

      - name: Upload Server Package
        uses: actions/upload-artifact@v4
        with:
          name: mcp-server-${{ matrix.os }}
          path: build/MCPPlugin-server-*.zip
          if-no-files-found: error
        timeout-minutes: 5

      - name: Upload Plugins Package
        uses: actions/upload-artifact@v4
        with:
          name: mcp-plugins-${{ matrix.os }}
          path: build/MCPPlugin-plugins-*.zip
          if-no-files-found: error
        timeout-minutes: 5

  release:
    name: Create Release
    needs: [package]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: "*.zip"
          merge-multiple: true

      - name: Rename artifacts for release
        run: |
          cd artifacts
          for file in *; do
            if [[ "$file" == *"ubuntu-22.04"* ]]; then
              new_name="${file/ubuntu-22.04/linux}"
              mv "$file" "$new_name"
            elif [[ "$file" == *"windows-2022"* ]]; then
              new_name="${file/windows-2022/windows}"
              mv "$file" "$new_name"
            fi
          done
          ls -la
        shell: bash

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/mcp-server-linux
            artifacts/mcp-plugins-linux
            artifacts/mcp-server-windows
            artifacts/mcp-plugins-windows
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
