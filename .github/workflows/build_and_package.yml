name: Build and Package

on:
  push:
    branches: [main, master]
    tags: ["v*"]
  pull_request:
    branches: [main, master]

jobs:
  package:
    name: Package for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, windows-2022]
        build_type: [Release]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: "recursive"

      # Install Linux dependencies
      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake zip
        timeout-minutes: 5

      # Install Windows dependencies
      - name: Install tools (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install cmake zip
        timeout-minutes: 5

      # Configure CMake
      - name: Configure CMake
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} --log-level=VERBOSE
        timeout-minutes: 10

      # Build project
      - name: Build project
        run: |
          cmake --build build --config ${{ matrix.build_type }} --parallel 2 --verbose
        timeout-minutes: 20

      # Generate monolithic package
      - name: Generate monolithic package
        run: |
          cd build
          cpack -G ZIP
        timeout-minutes: 10

      # List generated packages
      - name: List generated packages
        run: |
          ls -la build/
        shell: bash

      # Extract components on Linux
      - name: Extract components (Linux)
        if: runner.os == 'Linux'
        run: |
          cd build
          # Create temporary directories
          mkdir temp_server temp_plugins

          # Extract monolithic package to temporary directories
          unzip -q MCPPlugin-1.0.0-Linux-Runtime.zip -d temp_server
          unzip -q MCPPlugin-1.0.0-Linux-Runtime.zip -d temp_plugins

          # Server package: Remove plugin files
          rm -rf temp_server/bin/plugins temp_server/bin/configs

          # Plugin package: Remove server files
          find temp_plugins -name "PluginServer" -delete
          find temp_plugins -name "plugin_ctl" -delete

          # Repackage as independent component packages with platform identifier
          cd temp_server && zip -r ../MCPPlugin-server-linux.zip . && cd ..
          cd temp_plugins && zip -r ../MCPPlugin-plugins-linux.zip . && cd ..

          # Clean up temporary files
          rm -rf temp_server temp_plugins

          # Verify component packages are generated
          ls -la *.zip
        shell: bash

      # Extract components on Windows
      - name: Extract components (Windows)
        if: runner.os == 'Windows'
        run: |
          cd build
          # Create temporary directories
          mkdir temp_server, temp_plugins

          # Extract monolithic package
          Expand-Archive -Path "MCPPlugin-1.0.0-win64-Runtime.zip" -DestinationPath "temp_server" -Force
          Expand-Archive -Path "MCPPlugin-1.0.0-win64-Runtime.zip" -DestinationPath "temp_plugins" -Force

          # Server package: Remove plugin files
          if (Test-Path "temp_server\bin\plugins") { Remove-Item -Recurse -Force "temp_server\bin\plugins" }
          if (Test-Path "temp_server\bin\configs") { Remove-Item -Recurse -Force "temp_server\bin\configs" }

          # Plugin package: Remove server files
          Get-ChildItem -Path "temp_plugins" -Include "PluginServer.exe", "plugin_ctl.exe" -Recurse | Remove-Item -Force

          # Repackage as independent component packages with platform identifier
          Compress-Archive -Path "temp_server\*" -DestinationPath "MCPPlugin-server-windows.zip" -Force
          Compress-Archive -Path "temp_plugins\*" -DestinationPath "MCPPlugin-plugins-windows.zip" -Force

          # Clean up temporary files
          Remove-Item -Recurse -Force temp_server, temp_plugins

          # Verify component packages are generated
          Get-ChildItem *.zip
        shell: powershell

      # Upload server component package to Artifacts
      - name: Upload server package
        uses: actions/upload-artifact@v4
        with:
          name: mcp-server-${{ matrix.os }}
          path: build/MCPPlugin-server-*.zip
          if-no-files-found: error
        timeout-minutes: 5

      # Upload plugin component package to Artifacts
      - name: Upload plugins package
        uses: actions/upload-artifact@v4
        with:
          name: mcp-plugins-${{ matrix.os }}
          path: build/MCPPlugin-plugins-*.zip
          if-no-files-found: error
        timeout-minutes: 5

  # Create Release (only triggered when pushing tags)
  release:
    name: Create GitHub Release
    needs: [package]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-22.04
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Download all Artifacts to local artifacts directory
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      # Rename Artifacts directories
      - name: Rename artifact directories
        run: |
          cd artifacts
          # Print original directory structure
          echo "Original artifact directories:"
          ls -la

          # Rename Ubuntu directory to linux, Windows directory to windows
          for dir in *; do
            if [[ "$dir" == *"ubuntu-22.04"* ]]; then
              new_dir="${dir/ubuntu-22.04/linux}"
              mv "$dir" "$new_dir"
              echo "Renamed: $dir -> $new_dir"
            elif [[ "$dir" == *"windows-2022"* ]]; then
              new_dir="${dir/windows-2022/windows}"
              mv "$dir" "$new_dir"
              echo "Renamed: $dir -> $new_dir"
            fi
          done

          # Print renamed directory structure
          echo "Renamed artifact directories:"
          ls -la
          echo "Files in each directory:"
          ls -R .
        shell: bash

      # Create Release and upload component packages
      - name: Create and upload Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/mcp-server-linux/MCPPlugin-server-linux.zip
            artifacts/mcp-plugins-linux/MCPPlugin-plugins-linux.zip
            artifacts/mcp-server-windows/MCPPlugin-server-windows.zip
            artifacts/mcp-plugins-windows/MCPPlugin-plugins-windows.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
