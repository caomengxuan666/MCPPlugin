cmake_minimum_required(VERSION 3.10)
project(PluginServer VERSION 0.1.2.0 LANGUAGES CXX C)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Set output directories
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)

# Set plugin output directories
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR}/bin)

# Set config file output directory
set(CONFIGS_OUTPUT_DIR ${CMAKE_BINARY_DIR}/configs)

include_directories(include)
include_directories(include/sdk)
include_directories(src)
include(FindMCPOpenSSL.cmake)

# msvc utf-8
if(MSVC)
    add_compile_options(/utf-8)

    # nominmax
    add_definitions(-DNOMINMAX)
endif()

# Add source files
set(SOURCES
    main.cc
    src/plugin_manager.cpp
    src/env_manager.cpp
    src/plugin_repo_manager.cpp
    protocol/json_rpc.cpp
    include/sdk/tool_info_parser.cpp
    include/core/executable_path.cpp
)

# Add header files for IDEs
set(HEADERS
    include/plugin_manager.h
    include/env_manager.h
    include/plugin_repo_manager.h
    include/mcp_plugin.h
    protocol/tool.h
    protocol/json_rpc.h
    include/sdk/tool_info_parser.h
    include/core/executable_path.h
    include/core/mcpserver_api.h
)

add_executable(PluginServer ${SOURCES})

find_package(Threads REQUIRED)
target_link_libraries(PluginServer Threads::Threads MCP::OpenSSL)

# Add subdirectories
add_subdirectory(protocol)
add_subdirectory(include/core)
add_subdirectory(include/sdk)
add_subdirectory(plugins)
add_subdirectory(tools)
add_subdirectory(include/miniz)

# Link libraries
target_link_libraries(PluginServer mcp_core mcp_plugin_sdk miniz)
target_include_directories(PluginServer PRIVATE include/miniz)

# if there is a .env file,copy it to the bin directory
if(EXISTS ${CMAKE_SOURCE_DIR}/.env)
    add_custom_command(TARGET PluginServer POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_SOURCE_DIR}/.env ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}
    )
endif()

# copy .env.example to the bin directory
file(COPY ${CMAKE_SOURCE_DIR}/.env.example DESTINATION ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})

if(WIN32)
    target_link_libraries(PluginServer wsock32 ws2_32)
endif()

install(TARGETS PluginServer
    RUNTIME DESTINATION bin
    COMPONENT server
)

install(TARGETS plugin_ctl
    RUNTIME DESTINATION bin
    COMPONENT server
)

# Install config directory
install(DIRECTORY ${CONFIGS_OUTPUT_DIR}/
    DESTINATION bin/configs
    COMPONENT plugins
    OPTIONAL
)

set(CPACK_PROJECT_NAME ${PROJECT_NAME})
set(CPACK_PROJECT_VERSION ${PROJECT_VERSION})
include(CPackConfig.cmake)
include(CPack)